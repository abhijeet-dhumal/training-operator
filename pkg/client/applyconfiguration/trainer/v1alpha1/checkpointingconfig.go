// Copyright 2024 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/core/v1"
)

// CheckpointingConfigApplyConfiguration represents a declarative configuration of the CheckpointingConfig type for use
// with apply.
type CheckpointingConfigApplyConfiguration struct {
	Enabled              *bool                                `json:"enabled,omitempty"`
	Storage              *CheckpointStorageApplyConfiguration `json:"storage,omitempty"`
	Interval             *string                              `json:"interval,omitempty"`
	MaxCheckpoints       *int32                               `json:"maxCheckpoints,omitempty"`
	ResumeFromCheckpoint *bool                                `json:"resumeFromCheckpoint,omitempty"`
	Env                  []v1.EnvVarApplyConfiguration        `json:"env,omitempty"`
}

// CheckpointingConfigApplyConfiguration constructs a declarative configuration of the CheckpointingConfig type for use with
// apply.
func CheckpointingConfig() *CheckpointingConfigApplyConfiguration {
	return &CheckpointingConfigApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *CheckpointingConfigApplyConfiguration) WithEnabled(value bool) *CheckpointingConfigApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithStorage sets the Storage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Storage field is set to the value of the last call.
func (b *CheckpointingConfigApplyConfiguration) WithStorage(value *CheckpointStorageApplyConfiguration) *CheckpointingConfigApplyConfiguration {
	b.Storage = value
	return b
}

// WithInterval sets the Interval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Interval field is set to the value of the last call.
func (b *CheckpointingConfigApplyConfiguration) WithInterval(value string) *CheckpointingConfigApplyConfiguration {
	b.Interval = &value
	return b
}

// WithMaxCheckpoints sets the MaxCheckpoints field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxCheckpoints field is set to the value of the last call.
func (b *CheckpointingConfigApplyConfiguration) WithMaxCheckpoints(value int32) *CheckpointingConfigApplyConfiguration {
	b.MaxCheckpoints = &value
	return b
}

// WithResumeFromCheckpoint sets the ResumeFromCheckpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResumeFromCheckpoint field is set to the value of the last call.
func (b *CheckpointingConfigApplyConfiguration) WithResumeFromCheckpoint(value bool) *CheckpointingConfigApplyConfiguration {
	b.ResumeFromCheckpoint = &value
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *CheckpointingConfigApplyConfiguration) WithEnv(values ...*v1.EnvVarApplyConfiguration) *CheckpointingConfigApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEnv")
		}
		b.Env = append(b.Env, *values[i])
	}
	return b
}
