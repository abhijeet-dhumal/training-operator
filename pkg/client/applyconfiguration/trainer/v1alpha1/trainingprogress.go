// Copyright 2024 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TrainingProgressApplyConfiguration represents a declarative configuration of the TrainingProgress type for use
// with apply.
type TrainingProgressApplyConfiguration struct {
	Epoch                  *int32                                 `json:"epoch,omitempty"`
	TotalEpochs            *int32                                 `json:"totalEpochs,omitempty"`
	Step                   *int64                                 `json:"step,omitempty"`
	TotalSteps             *int64                                 `json:"totalSteps,omitempty"`
	Loss                   *string                                `json:"loss,omitempty"`
	Accuracy               *string                                `json:"accuracy,omitempty"`
	ValidationLoss         *string                                `json:"validationLoss,omitempty"`
	ValidationAccuracy     *string                                `json:"validationAccuracy,omitempty"`
	LearningRate           *string                                `json:"learningRate,omitempty"`
	PercentComplete        *string                                `json:"percentComplete,omitempty"`
	EstimatedTimeRemaining *string                                `json:"estimatedTimeRemaining,omitempty"`
	LastUpdateTime         *v1.Time                               `json:"lastUpdateTime,omitempty"`
	Checkpointing          *CheckpointingStatusApplyConfiguration `json:"checkpointing,omitempty"`
}

// TrainingProgressApplyConfiguration constructs a declarative configuration of the TrainingProgress type for use with
// apply.
func TrainingProgress() *TrainingProgressApplyConfiguration {
	return &TrainingProgressApplyConfiguration{}
}

// WithEpoch sets the Epoch field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Epoch field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithEpoch(value int32) *TrainingProgressApplyConfiguration {
	b.Epoch = &value
	return b
}

// WithTotalEpochs sets the TotalEpochs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalEpochs field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithTotalEpochs(value int32) *TrainingProgressApplyConfiguration {
	b.TotalEpochs = &value
	return b
}

// WithStep sets the Step field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Step field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithStep(value int64) *TrainingProgressApplyConfiguration {
	b.Step = &value
	return b
}

// WithTotalSteps sets the TotalSteps field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalSteps field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithTotalSteps(value int64) *TrainingProgressApplyConfiguration {
	b.TotalSteps = &value
	return b
}

// WithLoss sets the Loss field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Loss field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithLoss(value string) *TrainingProgressApplyConfiguration {
	b.Loss = &value
	return b
}

// WithAccuracy sets the Accuracy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Accuracy field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithAccuracy(value string) *TrainingProgressApplyConfiguration {
	b.Accuracy = &value
	return b
}

// WithValidationLoss sets the ValidationLoss field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ValidationLoss field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithValidationLoss(value string) *TrainingProgressApplyConfiguration {
	b.ValidationLoss = &value
	return b
}

// WithValidationAccuracy sets the ValidationAccuracy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ValidationAccuracy field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithValidationAccuracy(value string) *TrainingProgressApplyConfiguration {
	b.ValidationAccuracy = &value
	return b
}

// WithLearningRate sets the LearningRate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LearningRate field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithLearningRate(value string) *TrainingProgressApplyConfiguration {
	b.LearningRate = &value
	return b
}

// WithPercentComplete sets the PercentComplete field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PercentComplete field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithPercentComplete(value string) *TrainingProgressApplyConfiguration {
	b.PercentComplete = &value
	return b
}

// WithEstimatedTimeRemaining sets the EstimatedTimeRemaining field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EstimatedTimeRemaining field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithEstimatedTimeRemaining(value string) *TrainingProgressApplyConfiguration {
	b.EstimatedTimeRemaining = &value
	return b
}

// WithLastUpdateTime sets the LastUpdateTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastUpdateTime field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithLastUpdateTime(value v1.Time) *TrainingProgressApplyConfiguration {
	b.LastUpdateTime = &value
	return b
}

// WithCheckpointing sets the Checkpointing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Checkpointing field is set to the value of the last call.
func (b *TrainingProgressApplyConfiguration) WithCheckpointing(value *CheckpointingStatusApplyConfiguration) *TrainingProgressApplyConfiguration {
	b.Checkpointing = value
	return b
}
