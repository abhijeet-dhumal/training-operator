// Copyright 2024 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ProgressionStatusApplyConfiguration represents a declarative configuration of the ProgressionStatus type for use
// with apply.
type ProgressionStatusApplyConfiguration struct {
	CurrentStep            *int64                             `json:"currentStep,omitempty"`
	TotalSteps             *int64                             `json:"totalSteps,omitempty"`
	PercentageComplete     *string                            `json:"percentageComplete,omitempty"`
	EstimatedTimeRemaining *int64                             `json:"estimatedTimeRemaining,omitempty"`
	CurrentEpoch           *int64                             `json:"currentEpoch,omitempty"`
	TotalEpochs            *int64                             `json:"totalEpochs,omitempty"`
	LastUpdateTime         *v1.Time                           `json:"lastUpdateTime,omitempty"`
	Message                *string                            `json:"message,omitempty"`
	TrainingMetrics        *TrainingMetricsApplyConfiguration `json:"trainingMetrics,omitempty"`
	Metrics                map[string]string                  `json:"metrics,omitempty"`
}

// ProgressionStatusApplyConfiguration constructs a declarative configuration of the ProgressionStatus type for use with
// apply.
func ProgressionStatus() *ProgressionStatusApplyConfiguration {
	return &ProgressionStatusApplyConfiguration{}
}

// WithCurrentStep sets the CurrentStep field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentStep field is set to the value of the last call.
func (b *ProgressionStatusApplyConfiguration) WithCurrentStep(value int64) *ProgressionStatusApplyConfiguration {
	b.CurrentStep = &value
	return b
}

// WithTotalSteps sets the TotalSteps field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalSteps field is set to the value of the last call.
func (b *ProgressionStatusApplyConfiguration) WithTotalSteps(value int64) *ProgressionStatusApplyConfiguration {
	b.TotalSteps = &value
	return b
}

// WithPercentageComplete sets the PercentageComplete field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PercentageComplete field is set to the value of the last call.
func (b *ProgressionStatusApplyConfiguration) WithPercentageComplete(value string) *ProgressionStatusApplyConfiguration {
	b.PercentageComplete = &value
	return b
}

// WithEstimatedTimeRemaining sets the EstimatedTimeRemaining field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EstimatedTimeRemaining field is set to the value of the last call.
func (b *ProgressionStatusApplyConfiguration) WithEstimatedTimeRemaining(value int64) *ProgressionStatusApplyConfiguration {
	b.EstimatedTimeRemaining = &value
	return b
}

// WithCurrentEpoch sets the CurrentEpoch field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentEpoch field is set to the value of the last call.
func (b *ProgressionStatusApplyConfiguration) WithCurrentEpoch(value int64) *ProgressionStatusApplyConfiguration {
	b.CurrentEpoch = &value
	return b
}

// WithTotalEpochs sets the TotalEpochs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalEpochs field is set to the value of the last call.
func (b *ProgressionStatusApplyConfiguration) WithTotalEpochs(value int64) *ProgressionStatusApplyConfiguration {
	b.TotalEpochs = &value
	return b
}

// WithLastUpdateTime sets the LastUpdateTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastUpdateTime field is set to the value of the last call.
func (b *ProgressionStatusApplyConfiguration) WithLastUpdateTime(value v1.Time) *ProgressionStatusApplyConfiguration {
	b.LastUpdateTime = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *ProgressionStatusApplyConfiguration) WithMessage(value string) *ProgressionStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithTrainingMetrics sets the TrainingMetrics field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TrainingMetrics field is set to the value of the last call.
func (b *ProgressionStatusApplyConfiguration) WithTrainingMetrics(value *TrainingMetricsApplyConfiguration) *ProgressionStatusApplyConfiguration {
	b.TrainingMetrics = value
	return b
}

// WithMetrics puts the entries into the Metrics field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Metrics field,
// overwriting an existing map entries in Metrics field with the same key.
func (b *ProgressionStatusApplyConfiguration) WithMetrics(entries map[string]string) *ProgressionStatusApplyConfiguration {
	if b.Metrics == nil && len(entries) > 0 {
		b.Metrics = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Metrics[k] = v
	}
	return b
}
