// Copyright 2024 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// TrainingMetricsApplyConfiguration represents a declarative configuration of the TrainingMetrics type for use
// with apply.
type TrainingMetricsApplyConfiguration struct {
	Loss                 *string `json:"loss,omitempty"`
	LearningRate         *string `json:"learningRate,omitempty"`
	CheckpointsStored    *int64  `json:"checkpointsStored,omitempty"`
	LatestCheckpointPath *string `json:"latestCheckpointPath,omitempty"`
	Accuracy             *string `json:"accuracy,omitempty"`
}

// TrainingMetricsApplyConfiguration constructs a declarative configuration of the TrainingMetrics type for use with
// apply.
func TrainingMetrics() *TrainingMetricsApplyConfiguration {
	return &TrainingMetricsApplyConfiguration{}
}

// WithLoss sets the Loss field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Loss field is set to the value of the last call.
func (b *TrainingMetricsApplyConfiguration) WithLoss(value string) *TrainingMetricsApplyConfiguration {
	b.Loss = &value
	return b
}

// WithLearningRate sets the LearningRate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LearningRate field is set to the value of the last call.
func (b *TrainingMetricsApplyConfiguration) WithLearningRate(value string) *TrainingMetricsApplyConfiguration {
	b.LearningRate = &value
	return b
}

// WithCheckpointsStored sets the CheckpointsStored field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CheckpointsStored field is set to the value of the last call.
func (b *TrainingMetricsApplyConfiguration) WithCheckpointsStored(value int64) *TrainingMetricsApplyConfiguration {
	b.CheckpointsStored = &value
	return b
}

// WithLatestCheckpointPath sets the LatestCheckpointPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LatestCheckpointPath field is set to the value of the last call.
func (b *TrainingMetricsApplyConfiguration) WithLatestCheckpointPath(value string) *TrainingMetricsApplyConfiguration {
	b.LatestCheckpointPath = &value
	return b
}

// WithAccuracy sets the Accuracy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Accuracy field is set to the value of the last call.
func (b *TrainingMetricsApplyConfiguration) WithAccuracy(value string) *TrainingMetricsApplyConfiguration {
	b.Accuracy = &value
	return b
}
