// Copyright 2024 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CheckpointingStatusApplyConfiguration represents a declarative configuration of the CheckpointingStatus type for use
// with apply.
type CheckpointingStatusApplyConfiguration struct {
	Enabled              *bool                              `json:"enabled,omitempty"`
	LatestCheckpoint     *string                            `json:"latestCheckpoint,omitempty"`
	LatestCheckpointTime *v1.Time                           `json:"latestCheckpointTime,omitempty"`
	CheckpointsCreated   *int32                             `json:"checkpointsCreated,omitempty"`
	LatestCheckpointSize *int64                             `json:"latestCheckpointSize,omitempty"`
	AvailableCheckpoints []CheckpointInfoApplyConfiguration `json:"availableCheckpoints,omitempty"`
	Error                *string                            `json:"error,omitempty"`
}

// CheckpointingStatusApplyConfiguration constructs a declarative configuration of the CheckpointingStatus type for use with
// apply.
func CheckpointingStatus() *CheckpointingStatusApplyConfiguration {
	return &CheckpointingStatusApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *CheckpointingStatusApplyConfiguration) WithEnabled(value bool) *CheckpointingStatusApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithLatestCheckpoint sets the LatestCheckpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LatestCheckpoint field is set to the value of the last call.
func (b *CheckpointingStatusApplyConfiguration) WithLatestCheckpoint(value string) *CheckpointingStatusApplyConfiguration {
	b.LatestCheckpoint = &value
	return b
}

// WithLatestCheckpointTime sets the LatestCheckpointTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LatestCheckpointTime field is set to the value of the last call.
func (b *CheckpointingStatusApplyConfiguration) WithLatestCheckpointTime(value v1.Time) *CheckpointingStatusApplyConfiguration {
	b.LatestCheckpointTime = &value
	return b
}

// WithCheckpointsCreated sets the CheckpointsCreated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CheckpointsCreated field is set to the value of the last call.
func (b *CheckpointingStatusApplyConfiguration) WithCheckpointsCreated(value int32) *CheckpointingStatusApplyConfiguration {
	b.CheckpointsCreated = &value
	return b
}

// WithLatestCheckpointSize sets the LatestCheckpointSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LatestCheckpointSize field is set to the value of the last call.
func (b *CheckpointingStatusApplyConfiguration) WithLatestCheckpointSize(value int64) *CheckpointingStatusApplyConfiguration {
	b.LatestCheckpointSize = &value
	return b
}

// WithAvailableCheckpoints adds the given value to the AvailableCheckpoints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AvailableCheckpoints field.
func (b *CheckpointingStatusApplyConfiguration) WithAvailableCheckpoints(values ...*CheckpointInfoApplyConfiguration) *CheckpointingStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAvailableCheckpoints")
		}
		b.AvailableCheckpoints = append(b.AvailableCheckpoints, *values[i])
	}
	return b
}

// WithError sets the Error field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Error field is set to the value of the last call.
func (b *CheckpointingStatusApplyConfiguration) WithError(value string) *CheckpointingStatusApplyConfiguration {
	b.Error = &value
	return b
}
