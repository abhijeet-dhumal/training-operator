# coding: utf-8

"""
    Kubeflow Trainer OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_trainer_api.models.trainer_v1alpha1_checkpointing_status import TrainerV1alpha1CheckpointingStatus
from typing import Optional, Set
from typing_extensions import Self

class TrainerV1alpha1TrainingProgress(BaseModel):
    """
    TrainingProgress represents the current progress of the training job.
    """ # noqa: E501
    accuracy: Optional[StrictStr] = Field(default=None, description="Training accuracy (if available).")
    checkpointing: Optional[TrainerV1alpha1CheckpointingStatus] = Field(default=None, description="Checkpointing status and information.")
    epoch: Optional[StrictInt] = Field(default=None, description="Current epoch number (if applicable).")
    estimated_time_remaining: Optional[StrictStr] = Field(default=None, description="Estimated time remaining for training completion.", alias="estimatedTimeRemaining")
    last_update_time: Optional[datetime] = Field(default=None, description="Last time the progress was updated.", alias="lastUpdateTime")
    learning_rate: Optional[StrictStr] = Field(default=None, description="Learning rate (if available).", alias="learningRate")
    loss: Optional[StrictStr] = Field(default=None, description="Training loss value (if available).")
    percent_complete: Optional[StrictStr] = Field(default=None, description="Percentage of training completion (0-100).", alias="percentComplete")
    step: Optional[StrictInt] = Field(default=None, description="Current step/iteration number.")
    total_epochs: Optional[StrictInt] = Field(default=None, description="Total number of epochs (if known).", alias="totalEpochs")
    total_steps: Optional[StrictInt] = Field(default=None, description="Total number of steps (if known).", alias="totalSteps")
    validation_accuracy: Optional[StrictStr] = Field(default=None, description="Validation accuracy (if available).", alias="validationAccuracy")
    validation_loss: Optional[StrictStr] = Field(default=None, description="Validation loss (if available).", alias="validationLoss")
    __properties: ClassVar[List[str]] = ["accuracy", "checkpointing", "epoch", "estimatedTimeRemaining", "lastUpdateTime", "learningRate", "loss", "percentComplete", "step", "totalEpochs", "totalSteps", "validationAccuracy", "validationLoss"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrainerV1alpha1TrainingProgress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of checkpointing
        if self.checkpointing:
            _dict['checkpointing'] = self.checkpointing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrainerV1alpha1TrainingProgress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accuracy": obj.get("accuracy"),
            "checkpointing": TrainerV1alpha1CheckpointingStatus.from_dict(obj["checkpointing"]) if obj.get("checkpointing") is not None else None,
            "epoch": obj.get("epoch"),
            "estimatedTimeRemaining": obj.get("estimatedTimeRemaining"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "learningRate": obj.get("learningRate"),
            "loss": obj.get("loss"),
            "percentComplete": obj.get("percentComplete"),
            "step": obj.get("step"),
            "totalEpochs": obj.get("totalEpochs"),
            "totalSteps": obj.get("totalSteps"),
            "validationAccuracy": obj.get("validationAccuracy"),
            "validationLoss": obj.get("validationLoss")
        })
        return _obj


