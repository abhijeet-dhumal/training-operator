# coding: utf-8

"""
    Kubeflow Trainer OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_trainer_api.models.io_k8s_api_core_v1_local_object_reference import IoK8sApiCoreV1LocalObjectReference
from kubeflow_trainer_api.models.trainer_v1alpha1_checkpoint_persistent_volume_config import TrainerV1alpha1CheckpointPersistentVolumeConfig
from typing import Optional, Set
from typing_extensions import Self

class TrainerV1alpha1CheckpointStorage(BaseModel):
    """
    CheckpointStorage represents storage configuration for checkpoints.
    """ # noqa: E501
    access_mode: Optional[StrictStr] = Field(default=None, description="Access mode for the storage.", alias="accessMode")
    persistent_volume: Optional[TrainerV1alpha1CheckpointPersistentVolumeConfig] = Field(default=None, description="PersistentVolume configuration for checkpoint storage. References an existing PVC that must be created by the platform administrator.", alias="persistentVolume")
    secret_ref: Optional[IoK8sApiCoreV1LocalObjectReference] = Field(default=None, description="Reference to the secret containing credentials for accessing the storage. Secret must be created in the TrainJob's namespace. Not required for PersistentVolume storage.", alias="secretRef")
    uri: StrictStr = Field(description="Storage URI where checkpoints will be saved (e.g., \"s3://bucket/path\", \"gs://bucket/path\", \"/mnt/shared\"). For PersistentVolume storage, use a local path like \"/checkpoints\" or \"/shared/checkpoints\".")
    __properties: ClassVar[List[str]] = ["accessMode", "persistentVolume", "secretRef", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrainerV1alpha1CheckpointStorage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of persistent_volume
        if self.persistent_volume:
            _dict['persistentVolume'] = self.persistent_volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_ref
        if self.secret_ref:
            _dict['secretRef'] = self.secret_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrainerV1alpha1CheckpointStorage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessMode": obj.get("accessMode"),
            "persistentVolume": TrainerV1alpha1CheckpointPersistentVolumeConfig.from_dict(obj["persistentVolume"]) if obj.get("persistentVolume") is not None else None,
            "secretRef": IoK8sApiCoreV1LocalObjectReference.from_dict(obj["secretRef"]) if obj.get("secretRef") is not None else None,
            "uri": obj.get("uri") if obj.get("uri") is not None else ''
        })
        return _obj


