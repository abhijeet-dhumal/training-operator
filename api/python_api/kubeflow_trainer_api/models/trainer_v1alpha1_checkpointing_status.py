# coding: utf-8

"""
    Kubeflow Trainer OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_trainer_api.models.trainer_v1alpha1_checkpoint_info import TrainerV1alpha1CheckpointInfo
from typing import Optional, Set
from typing_extensions import Self

class TrainerV1alpha1CheckpointingStatus(BaseModel):
    """
    CheckpointingStatus represents the current status of checkpointing.
    """ # noqa: E501
    available_checkpoints: Optional[List[TrainerV1alpha1CheckpointInfo]] = Field(default=None, description="List of available checkpoints.", alias="availableCheckpoints")
    checkpoints_created: StrictInt = Field(description="Total number of checkpoints created.", alias="checkpointsCreated")
    enabled: StrictBool = Field(description="Whether checkpointing is currently enabled.")
    error: Optional[StrictStr] = Field(default=None, description="Any error encountered during checkpointing.")
    latest_checkpoint: Optional[StrictStr] = Field(default=None, description="Path or URI of the latest checkpoint.", alias="latestCheckpoint")
    latest_checkpoint_size: Optional[StrictInt] = Field(default=None, description="Size of the latest checkpoint (in bytes).", alias="latestCheckpointSize")
    latest_checkpoint_time: Optional[datetime] = Field(default=None, description="Timestamp when the latest checkpoint was created.", alias="latestCheckpointTime")
    __properties: ClassVar[List[str]] = ["availableCheckpoints", "checkpointsCreated", "enabled", "error", "latestCheckpoint", "latestCheckpointSize", "latestCheckpointTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrainerV1alpha1CheckpointingStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in available_checkpoints (list)
        _items = []
        if self.available_checkpoints:
            for _item_available_checkpoints in self.available_checkpoints:
                if _item_available_checkpoints:
                    _items.append(_item_available_checkpoints.to_dict())
            _dict['availableCheckpoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrainerV1alpha1CheckpointingStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableCheckpoints": [TrainerV1alpha1CheckpointInfo.from_dict(_item) for _item in obj["availableCheckpoints"]] if obj.get("availableCheckpoints") is not None else None,
            "checkpointsCreated": obj.get("checkpointsCreated") if obj.get("checkpointsCreated") is not None else 0,
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "error": obj.get("error"),
            "latestCheckpoint": obj.get("latestCheckpoint"),
            "latestCheckpointSize": obj.get("latestCheckpointSize"),
            "latestCheckpointTime": obj.get("latestCheckpointTime")
        })
        return _obj


