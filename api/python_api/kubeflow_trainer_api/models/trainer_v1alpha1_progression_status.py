# coding: utf-8

"""
    Kubeflow Trainer OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_trainer_api.models.trainer_v1alpha1_training_metrics import TrainerV1alpha1TrainingMetrics
from typing import Optional, Set
from typing_extensions import Self

class TrainerV1alpha1ProgressionStatus(BaseModel):
    """
    ProgressionStatus represents the training progression status read from rank 0 node.
    """ # noqa: E501
    current_epoch: Optional[StrictInt] = Field(default=None, description="CurrentEpoch is the current training epoch.", alias="currentEpoch")
    current_step: Optional[StrictInt] = Field(default=None, description="CurrentStep is the current training step/iteration.", alias="currentStep")
    estimated_time_remaining: Optional[StrictInt] = Field(default=None, description="EstimatedTimeRemaining is the estimated time remaining in seconds.", alias="estimatedTimeRemaining")
    last_update_time: Optional[datetime] = Field(default=None, description="LastUpdateTime is the timestamp when the progression was last updated.", alias="lastUpdateTime")
    message: Optional[StrictStr] = Field(default=None, description="Message provides additional information about the training progression.")
    metrics: Optional[Dict[str, StrictStr]] = Field(default=None, description="Metrics contains additional training metrics as key-value pairs.")
    percentage_complete: Optional[StrictStr] = Field(default=None, description="PercentageComplete represents the completion percentage (0-100) as a string.", alias="percentageComplete")
    total_epochs: Optional[StrictInt] = Field(default=None, description="TotalEpochs is the total number of training epochs.", alias="totalEpochs")
    total_steps: Optional[StrictInt] = Field(default=None, description="TotalSteps is the total number of training steps/iterations.", alias="totalSteps")
    training_metrics: Optional[TrainerV1alpha1TrainingMetrics] = Field(default=None, description="TrainingMetrics contains structured training metrics.", alias="trainingMetrics")
    __properties: ClassVar[List[str]] = ["currentEpoch", "currentStep", "estimatedTimeRemaining", "lastUpdateTime", "message", "metrics", "percentageComplete", "totalEpochs", "totalSteps", "trainingMetrics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrainerV1alpha1ProgressionStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of training_metrics
        if self.training_metrics:
            _dict['trainingMetrics'] = self.training_metrics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrainerV1alpha1ProgressionStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentEpoch": obj.get("currentEpoch"),
            "currentStep": obj.get("currentStep"),
            "estimatedTimeRemaining": obj.get("estimatedTimeRemaining"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "message": obj.get("message"),
            "metrics": obj.get("metrics"),
            "percentageComplete": obj.get("percentageComplete"),
            "totalEpochs": obj.get("totalEpochs"),
            "totalSteps": obj.get("totalSteps"),
            "trainingMetrics": TrainerV1alpha1TrainingMetrics.from_dict(obj["trainingMetrics"]) if obj.get("trainingMetrics") is not None else None
        })
        return _obj


